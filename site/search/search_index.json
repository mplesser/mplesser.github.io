{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home ITL Related Links ITL Home Steward Observatory University of Arizona Software Documentation AzCam GitHub repos","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#itl-related-links","text":"ITL Home Steward Observatory University of Arizona","title":"ITL Related Links"},{"location":"#software-documentation","text":"AzCam GitHub repos","title":"Software Documentation"},{"location":"about/","text":"Links for Michael Lesser Laboratory web site - www.itl.arizona.edu email linkedin github repos orcid researchgate google scholar","title":"Michael Lesser"},{"location":"about/#links-for-michael-lesser","text":"Laboratory web site - www.itl.arizona.edu email linkedin github repos orcid researchgate google scholar","title":"Links for Michael Lesser"},{"location":"azcam1/","text":"Introduction AzCam is a software framework for the acquisition and analysis of image data from scientific imaging systems as well as the control of instrumentation. It is intended to be customized for specific hardware, observational, and data reduction requirements. AzCam is based on the concept of tools which are the interfaces to both hardware and software code. Examples of tools are instrument which controls instrument hardware, telescope which interfaces to a telescope, linearity which acquires and analyzes images to determine sensor linearity, and exposure which controls a scientific observation by interfacing with a variety of other tools. As an example, the exposure tool may move a telescope and multiple filter wheels, control a camera shutter, operate the camera by taking an exposure, display the resultant image, and begin data reduction of that image. AzCam is not appropriate for consumer-level cameras and is not intended to have a common API across all systems. It's primary design principle is to allow interfacing to a wide variety of custom instrumentation which is required to acquire and analyze scientific image data. AzCam Links Main links AzCam documentation site GitHub repos Code details and links Tools Classes Commands Advanced concepts Advanced Operation There are three main operational modes of AzCam: A server, usually called azcamserver , which communicates directly or indirectly with system hardware. A console, usually called azcamconsole , which is typically implemented as an IPython command line interface that communicates with azcamserver over a socket connection. It is used to acquire and analyze image data through the command line and python code. Applications, which are usually client programs that communicate with azcamserver over sockets or the web API. While there are multiple pythonic ways to access the various tools in code, they are always accessible from the database object db , which can always be accessed as azcam.db . For example, when defined, the controller tool can be accessed as db.tools[\"controller\"] and the qe tool can be accessed as db.tools[\"qe\"] . In most environments these tool are mapped directly into the command namespace, so in practice commands are executed directly as object.method , e.g. exposure.expose(2.5, \"dark\", \"dark image\") . Tools defined on the server side may or may not be available as remote commands from a client. In azcamconsole , the available tools usually communication from the console to an azcamserver application over a socket interface. These client-side tools may only expose a limited set of methods as compared to the server-side tools. So while the command exposure.reset may be available from a client the command exposure.set_video_gain may not be. These less commonly used commands are still accessible, but only with lower level code such as server.command(\"controller.set_video_gain 2\") where server is a client's server communication tool. As an specific example, the code below can be used to set the current system wavelength and take an exposure. For this example, it is assumed here that the azcam-itl environment package has been installed (see Environments below.). # server-side (azcamserver) import azcam import azcam_itl.server instrument = azcam . db . tools [ \"instrument\" ] exposure = azcam . db . tools [ \"exposure\" ] instrument . set_wavelength ( 450 ) wavelength = instrument . get_wavelength () print ( f \"Current wavelength is { wavelength } \" ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" ) or # client-side (azcamconsole) import azcam import azam_itl.console instrument = azcam . db . tools [ \"instrument\" ] exposure = azcam . db . tools [ \"exposure\" ] instrument . set_wavelength ( 450 ) wavelength = instrument . get_wavelength () print ( f \"Current wavelength is { wavelength } \" ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" ) Both azcamserver and azcamconsole may also be called in a manner similar to: ipython - m azcam_itl . server - i -- - system LVM ipython - m azcam_itl . console - -- - system LVM Other examples: ipython -- profile azcamserver # to start IPython from azcam_itl import server from azcam.cli import * instrument . set_wavelength ( 450 ) exposure . expose ( 2.5 , \"flat\" , \"a test image\" ) azcam azcam_itl . console - system DESI Example configuration code may be found in the various environment packages with names like server.py and console.py . When working in a command line environment, it is often convenient to import commonly used commands into the CLI namespace. This provides direct access to objects and tools such as db , exposure , controller , and various pre-defined shortcuts. To do this, after configuring the environment, execute the commandfrom from azcam.cli import * . And then the code above could be executed as: from azcam.cli import * instrument . set_wavelength ( 450 ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" ) Tools There are many supported tools within azcam. See [Tools] for detailed information. AzCam Environments Some packages act as environments to define code and data files used for specific hardware systems. Examples include: azcam-90prime for the UArizona Bok telescope 90prime instrument azcam-mont4k for the UArizona Mont4k instrument azcam-vattspec for the VATT VattSpec camera AzCam Applications AzCam applications are stand-alone programs which utilize AzCam functionality. The most important application is azcamserver which defines the tools for a hardware system. Most but not all applications are clients which connect to an azcamserver application. These clients cab be written in any languages. Some are experimental or still in development. Examples include: azcam-expstatus : a small GUI which displays exposure progress azcam-monitor : an app to monitor and control AzCam processes on the local network azcam-tool : an exposure control GUI written in National Instruments LabVIEW azcam-imageserver adds support for remote image servers azcam-observe add observing scripts which support a Qt-based GUI and command line interface azcam-observe code docs can be found here Help AzCam is commonly used with IPython. Help is then available by typing ?xxx , xxx? , xxx?? or help(xxx) where xxx is an AzCam class, command, or object instance. Useful links include: * IPython https://ipython.org * Python programming language https://www.python.org Command Structure The AzCam command structure provides a fairly uniform interface which can be used from the local command line (CLI), a remote socket connection, or the web interface. An example for taking a 2.5 second flat field exposure is: Local CLI or script example: exposure . expose ( 2.5 , 'flat' , 'an image title' ) A remote socket connection example: exposure . expose 2.5 flat \"an image title\" Web (http) connection example: http://hostname:2403/api/exposure/expose?exposure_time=2.5 & image_type=flat & image_title=an+image+title Web support requires an extension package such as azcam-fastapi to be installed with azcamserver . Example URL's are: http://hostname:2403/status http://hostname:2403/exptool The value 2403 here is the web server port configured by a specific environment. Shortcuts When using IPython, the auto parenthesis mode allows typing commands without requiring the normal python syntax of command(par1, par2, ...) . The equivalent shortcut/alias syntax is command par1 par2 . With IPython in this mode all commands may use this syntax. There are also some simple but useful command line commands which can be optionally installed within console or server applications as typing shortcuts. Shortcuts are intended for command line use only and can be found in the db.shortcuts dictionary (see azcam.shortcuts ). Examples include: sav - save the current parameters to the parameter file pp - toggle the command line printout of client commands and responses command. gf - try and go to current image folder. sf - try and set the image folder to the current directory. bf - browse for a file or folder using a Tcl/Tk GUI. Autogenerated code documentation for the azcam python package can be found here . Scripts Scripts are python code modules which usually contain one function. They may be loaded automatically during enviroment configuration and can be found in the db.scripts dictionary. Scripts defined on the server side are not available as remote commands. import azcam_scripts azcam_scripts . load () get_pressures ( 2.0 , \"get_pressures.log\" , 1 ) Configuration Folders There are two important folders which are defined by most environments: systemfolder - the main folder where configuration code is located. It is often the root of the environment's python package. datafolder - the root folder where data and parameters are saved. Write access is required. It is often similar to /data/sytemfolder .","title":"Overview"},{"location":"azcam1/#introduction","text":"AzCam is a software framework for the acquisition and analysis of image data from scientific imaging systems as well as the control of instrumentation. It is intended to be customized for specific hardware, observational, and data reduction requirements. AzCam is based on the concept of tools which are the interfaces to both hardware and software code. Examples of tools are instrument which controls instrument hardware, telescope which interfaces to a telescope, linearity which acquires and analyzes images to determine sensor linearity, and exposure which controls a scientific observation by interfacing with a variety of other tools. As an example, the exposure tool may move a telescope and multiple filter wheels, control a camera shutter, operate the camera by taking an exposure, display the resultant image, and begin data reduction of that image. AzCam is not appropriate for consumer-level cameras and is not intended to have a common API across all systems. It's primary design principle is to allow interfacing to a wide variety of custom instrumentation which is required to acquire and analyze scientific image data.","title":"Introduction"},{"location":"azcam1/#azcam-links","text":"Main links AzCam documentation site GitHub repos Code details and links Tools Classes Commands Advanced concepts Advanced","title":"AzCam Links"},{"location":"azcam1/#operation","text":"There are three main operational modes of AzCam: A server, usually called azcamserver , which communicates directly or indirectly with system hardware. A console, usually called azcamconsole , which is typically implemented as an IPython command line interface that communicates with azcamserver over a socket connection. It is used to acquire and analyze image data through the command line and python code. Applications, which are usually client programs that communicate with azcamserver over sockets or the web API. While there are multiple pythonic ways to access the various tools in code, they are always accessible from the database object db , which can always be accessed as azcam.db . For example, when defined, the controller tool can be accessed as db.tools[\"controller\"] and the qe tool can be accessed as db.tools[\"qe\"] . In most environments these tool are mapped directly into the command namespace, so in practice commands are executed directly as object.method , e.g. exposure.expose(2.5, \"dark\", \"dark image\") . Tools defined on the server side may or may not be available as remote commands from a client. In azcamconsole , the available tools usually communication from the console to an azcamserver application over a socket interface. These client-side tools may only expose a limited set of methods as compared to the server-side tools. So while the command exposure.reset may be available from a client the command exposure.set_video_gain may not be. These less commonly used commands are still accessible, but only with lower level code such as server.command(\"controller.set_video_gain 2\") where server is a client's server communication tool. As an specific example, the code below can be used to set the current system wavelength and take an exposure. For this example, it is assumed here that the azcam-itl environment package has been installed (see Environments below.). # server-side (azcamserver) import azcam import azcam_itl.server instrument = azcam . db . tools [ \"instrument\" ] exposure = azcam . db . tools [ \"exposure\" ] instrument . set_wavelength ( 450 ) wavelength = instrument . get_wavelength () print ( f \"Current wavelength is { wavelength } \" ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" ) or # client-side (azcamconsole) import azcam import azam_itl.console instrument = azcam . db . tools [ \"instrument\" ] exposure = azcam . db . tools [ \"exposure\" ] instrument . set_wavelength ( 450 ) wavelength = instrument . get_wavelength () print ( f \"Current wavelength is { wavelength } \" ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" ) Both azcamserver and azcamconsole may also be called in a manner similar to: ipython - m azcam_itl . server - i -- - system LVM ipython - m azcam_itl . console - -- - system LVM Other examples: ipython -- profile azcamserver # to start IPython from azcam_itl import server from azcam.cli import * instrument . set_wavelength ( 450 ) exposure . expose ( 2.5 , \"flat\" , \"a test image\" ) azcam azcam_itl . console - system DESI Example configuration code may be found in the various environment packages with names like server.py and console.py . When working in a command line environment, it is often convenient to import commonly used commands into the CLI namespace. This provides direct access to objects and tools such as db , exposure , controller , and various pre-defined shortcuts. To do this, after configuring the environment, execute the commandfrom from azcam.cli import * . And then the code above could be executed as: from azcam.cli import * instrument . set_wavelength ( 450 ) exposure . expose ( 2. , 'flat' , \"a 450 nm flat field image\" )","title":"Operation"},{"location":"azcam1/#tools","text":"There are many supported tools within azcam. See [Tools] for detailed information.","title":"Tools"},{"location":"azcam1/#azcam-environments","text":"Some packages act as environments to define code and data files used for specific hardware systems. Examples include: azcam-90prime for the UArizona Bok telescope 90prime instrument azcam-mont4k for the UArizona Mont4k instrument azcam-vattspec for the VATT VattSpec camera","title":"AzCam Environments"},{"location":"azcam1/#azcam-applications","text":"AzCam applications are stand-alone programs which utilize AzCam functionality. The most important application is azcamserver which defines the tools for a hardware system. Most but not all applications are clients which connect to an azcamserver application. These clients cab be written in any languages. Some are experimental or still in development. Examples include: azcam-expstatus : a small GUI which displays exposure progress azcam-monitor : an app to monitor and control AzCam processes on the local network azcam-tool : an exposure control GUI written in National Instruments LabVIEW azcam-imageserver adds support for remote image servers azcam-observe add observing scripts which support a Qt-based GUI and command line interface azcam-observe code docs can be found here","title":"AzCam Applications"},{"location":"azcam1/#help","text":"AzCam is commonly used with IPython. Help is then available by typing ?xxx , xxx? , xxx?? or help(xxx) where xxx is an AzCam class, command, or object instance. Useful links include: * IPython https://ipython.org * Python programming language https://www.python.org","title":"Help"},{"location":"azcam1/#command-structure","text":"The AzCam command structure provides a fairly uniform interface which can be used from the local command line (CLI), a remote socket connection, or the web interface. An example for taking a 2.5 second flat field exposure is: Local CLI or script example: exposure . expose ( 2.5 , 'flat' , 'an image title' ) A remote socket connection example: exposure . expose 2.5 flat \"an image title\" Web (http) connection example: http://hostname:2403/api/exposure/expose?exposure_time=2.5 & image_type=flat & image_title=an+image+title Web support requires an extension package such as azcam-fastapi to be installed with azcamserver . Example URL's are: http://hostname:2403/status http://hostname:2403/exptool The value 2403 here is the web server port configured by a specific environment.","title":"Command Structure"},{"location":"azcam1/#shortcuts","text":"When using IPython, the auto parenthesis mode allows typing commands without requiring the normal python syntax of command(par1, par2, ...) . The equivalent shortcut/alias syntax is command par1 par2 . With IPython in this mode all commands may use this syntax. There are also some simple but useful command line commands which can be optionally installed within console or server applications as typing shortcuts. Shortcuts are intended for command line use only and can be found in the db.shortcuts dictionary (see azcam.shortcuts ). Examples include: sav - save the current parameters to the parameter file pp - toggle the command line printout of client commands and responses command. gf - try and go to current image folder. sf - try and set the image folder to the current directory. bf - browse for a file or folder using a Tcl/Tk GUI. Autogenerated code documentation for the azcam python package can be found here .","title":"Shortcuts"},{"location":"azcam1/#scripts","text":"Scripts are python code modules which usually contain one function. They may be loaded automatically during enviroment configuration and can be found in the db.scripts dictionary. Scripts defined on the server side are not available as remote commands. import azcam_scripts azcam_scripts . load () get_pressures ( 2.0 , \"get_pressures.log\" , 1 )","title":"Scripts"},{"location":"azcam1/#configuration-folders","text":"There are two important folders which are defined by most environments: systemfolder - the main folder where configuration code is located. It is often the root of the environment's python package. datafolder - the root folder where data and parameters are saved. Write access is required. It is often similar to /data/sytemfolder .","title":"Configuration Folders"},{"location":"azcam1/advanced/","text":"Advanced This document describes AzCam installation, configuration, and programming. It is intended for advanced users. See this image for a graphical layout of AzCam. Dependencies AzCam currently uses Python 3.9 . Important dependancies include: numpy astropy matplotlib loguru There are many other dependencies depending on configuration. Examples are: ipython fastapi scipy pandas PyPDF2 rst2pdf pdfkit markdown mysql-connector pyserial keyring Versioning Because AzCam consists of many different modules and extensions, there is no single version number or date which uniquely identifies all the code. Version numbers are available from the github repositories . Conventions Modules (files), objects (such as controller ), command names (methods) and attributes (parameters) are all lowercase. Filenames should be specified with forward slash ('/') separators, even under MS Windows. If back slashes are needed, they must be doubled as in c:\\\\data . Strings must be enclosed in quotation marks, as in parameters.get_par('imageroot') . Quotation marks must match ('imageroot\" is not acceptable). A quotation mark may be included in a string by preceding it with a backslash, as \"I am Mike\\'s dog\" to generate \"I am Mike's dog\" . Tools Python is an object oriented programming language and objects are used extensively in AzCam. The main objects are instances of classes are are referred to as tools . Object-based commands provide control of all aspects of AzCam. These commands (class methods) interact with hardware such as controllers, instruments, temperature controllers, and telescopes as well as with more virtual tools such as the exposures, images, databases, time, communication interfaces, etc. The command syntax is tool.command(args) where tool is the tool name (such as controller , instrument , telescope , etc.) and command() is the command. If command() uses arguments, they are specified as comma separated values of the appropriate type, such as tool.command('ITL', 1.234, 45) . For example, the command to initialize to the instrument is instrument.initialize() and the command to get instrument focus is telescope.get_focus() . Parameters Parameters may be read with the parameters.get_par() command and written with the parameters.set_par() command. For example, parameters.get_par('imagetype') returns the current image type. Logging The azcam.log() function should be used for message output instead of python's print() function. This is important due to the multithreading nature of AzCam. The output of the log() function is defined in code and is typically directed to both the console and a rotating log file. The log() function supports levels which determine if the logged message should actually be displayed. If the level value is greater than or equal to the value of azcam.db.verbosity then the message string is displayed. The default level is 1 for both verbosity and the log() command. Higher verbosity settings are intended for more detailed debug information. It is also possible to direct logging to a web application, a syslog handler, or other applications. See https://loguru.readthedocs.io/en/stable/index.html and the azcam.logger.py code. Python See http://www.python.org for all things pythonic. Ports AzCam reserves ten socket ports for each AzCam process. The ports are used for various server functions and may not all be needed in a specific environment. The command server port is the base port each AzCam process and the remaining ports are incremented from that. The default command server port is 2402 for the first AzCam process, 2412 for the second process, 2422 for the third, and so on. Complex systems often use many ports while the most basic systems may use no ports. Common port uses are: command server port - 2402 web server port - 2403 logging server port - 2404 controller server port - 2405 Reserved - 2406 Reserved - 2407 Reserved - 2408 Reserved - 2409 Reserved - 2410 Reserved - 2411 Ports 2400 and 2401 are typically reserved for the azcam-monitor process which can monitor and control all azcam proceses on a single host.","title":"Advanced"},{"location":"azcam1/advanced/#advanced","text":"This document describes AzCam installation, configuration, and programming. It is intended for advanced users. See this image for a graphical layout of AzCam.","title":"Advanced"},{"location":"azcam1/advanced/#dependencies","text":"AzCam currently uses Python 3.9 . Important dependancies include: numpy astropy matplotlib loguru There are many other dependencies depending on configuration. Examples are: ipython fastapi scipy pandas PyPDF2 rst2pdf pdfkit markdown mysql-connector pyserial keyring","title":"Dependencies"},{"location":"azcam1/advanced/#versioning","text":"Because AzCam consists of many different modules and extensions, there is no single version number or date which uniquely identifies all the code. Version numbers are available from the github repositories .","title":"Versioning"},{"location":"azcam1/advanced/#conventions","text":"Modules (files), objects (such as controller ), command names (methods) and attributes (parameters) are all lowercase. Filenames should be specified with forward slash ('/') separators, even under MS Windows. If back slashes are needed, they must be doubled as in c:\\\\data . Strings must be enclosed in quotation marks, as in parameters.get_par('imageroot') . Quotation marks must match ('imageroot\" is not acceptable). A quotation mark may be included in a string by preceding it with a backslash, as \"I am Mike\\'s dog\" to generate \"I am Mike's dog\" .","title":"Conventions"},{"location":"azcam1/advanced/#tools","text":"Python is an object oriented programming language and objects are used extensively in AzCam. The main objects are instances of classes are are referred to as tools . Object-based commands provide control of all aspects of AzCam. These commands (class methods) interact with hardware such as controllers, instruments, temperature controllers, and telescopes as well as with more virtual tools such as the exposures, images, databases, time, communication interfaces, etc. The command syntax is tool.command(args) where tool is the tool name (such as controller , instrument , telescope , etc.) and command() is the command. If command() uses arguments, they are specified as comma separated values of the appropriate type, such as tool.command('ITL', 1.234, 45) . For example, the command to initialize to the instrument is instrument.initialize() and the command to get instrument focus is telescope.get_focus() .","title":"Tools"},{"location":"azcam1/advanced/#parameters","text":"Parameters may be read with the parameters.get_par() command and written with the parameters.set_par() command. For example, parameters.get_par('imagetype') returns the current image type.","title":"Parameters"},{"location":"azcam1/advanced/#logging","text":"The azcam.log() function should be used for message output instead of python's print() function. This is important due to the multithreading nature of AzCam. The output of the log() function is defined in code and is typically directed to both the console and a rotating log file. The log() function supports levels which determine if the logged message should actually be displayed. If the level value is greater than or equal to the value of azcam.db.verbosity then the message string is displayed. The default level is 1 for both verbosity and the log() command. Higher verbosity settings are intended for more detailed debug information. It is also possible to direct logging to a web application, a syslog handler, or other applications. See https://loguru.readthedocs.io/en/stable/index.html and the azcam.logger.py code.","title":"Logging"},{"location":"azcam1/advanced/#python","text":"See http://www.python.org for all things pythonic.","title":"Python"},{"location":"azcam1/advanced/#ports","text":"AzCam reserves ten socket ports for each AzCam process. The ports are used for various server functions and may not all be needed in a specific environment. The command server port is the base port each AzCam process and the remaining ports are incremented from that. The default command server port is 2402 for the first AzCam process, 2412 for the second process, 2422 for the third, and so on. Complex systems often use many ports while the most basic systems may use no ports. Common port uses are: command server port - 2402 web server port - 2403 logging server port - 2404 controller server port - 2405 Reserved - 2406 Reserved - 2407 Reserved - 2408 Reserved - 2409 Reserved - 2410 Reserved - 2411 Ports 2400 and 2401 are typically reserved for the azcam-monitor process which can monitor and control all azcam proceses on a single host.","title":"Ports"},{"location":"azcam1/classes/","text":"Classes AzCam's classes are often combined with the classes which define tools to provide common functionality cross multiple tools. For example, the controller , instrument , and telescope tools may all use the header class to define header information. Image Class The Image Class defines Azcam's image object. Within azcam it is also used to define the exposure.image object which receives image data from a camera controller. It is imported automatically into the azcam namespace from the azcam.image module. Usage Example: im1 = azcam.Image('test.fits') Documentation for the Image class Database Class This class defines the azcam.db object. Documentation for the Database Header Class Azcam uses object specific keyword indexed dictionary to maintain textual informational about some tools. These are typically called headers as they are used to provide information in image headers. The keywords and their corresponding values, data type, and comment field are stored in each of the controller, instrument, and telescope header dictionary. These dictionaries are manipulated by commands both from clients and internally in Azcam. Most of the values are written to the image file header (such as a FITS header) when an exposure begins. The header information is accessed through methods such as controller.header.get_keywords() to get a list of all keywords and instrument.get_keyword('FILTER1') to get the currentvalue for the keyword. The read_header() method of each tools will actively read hardware to obtain information (such as controller.read_header() or instrument.read_header() ). In general there is a method of the same name in both the header class and the actual tool's class, such as controller.header.get_keyword() and controller.get_keyword() . The .header version reads the current data as stored in the header dictionary while the tool's version usually reads actual hardware values and then stores that data in the header dictionary. The telescope and instrument dictionaries are considered temporary and re-read every time an exposure starts. This is so that rapidly changing data values do not become stale. Most dictionary information is written to the image file header if the selected image format supports headers. When an object such as an instrument or telescope is disabled, the corresponding object database information is deleted and no longer updated. Documentation for the Header class Focalplane class Below is the documentation for the FocalPlane class which is used internally to define all aspects of the focal plane and sensor configuration. Documentation for the FocalPlane class Filename class Below is the documentation for the Filename class which is used internally to define and manipulate image filenames. Documentation for the Filename class","title":"Classes"},{"location":"azcam1/classes/#classes","text":"AzCam's classes are often combined with the classes which define tools to provide common functionality cross multiple tools. For example, the controller , instrument , and telescope tools may all use the header class to define header information.","title":"Classes"},{"location":"azcam1/classes/#image-class","text":"The Image Class defines Azcam's image object. Within azcam it is also used to define the exposure.image object which receives image data from a camera controller. It is imported automatically into the azcam namespace from the azcam.image module. Usage Example: im1 = azcam.Image('test.fits') Documentation for the Image class","title":"Image Class"},{"location":"azcam1/classes/#database-class","text":"This class defines the azcam.db object. Documentation for the Database","title":"Database Class"},{"location":"azcam1/classes/#header-class","text":"Azcam uses object specific keyword indexed dictionary to maintain textual informational about some tools. These are typically called headers as they are used to provide information in image headers. The keywords and their corresponding values, data type, and comment field are stored in each of the controller, instrument, and telescope header dictionary. These dictionaries are manipulated by commands both from clients and internally in Azcam. Most of the values are written to the image file header (such as a FITS header) when an exposure begins. The header information is accessed through methods such as controller.header.get_keywords() to get a list of all keywords and instrument.get_keyword('FILTER1') to get the currentvalue for the keyword. The read_header() method of each tools will actively read hardware to obtain information (such as controller.read_header() or instrument.read_header() ). In general there is a method of the same name in both the header class and the actual tool's class, such as controller.header.get_keyword() and controller.get_keyword() . The .header version reads the current data as stored in the header dictionary while the tool's version usually reads actual hardware values and then stores that data in the header dictionary. The telescope and instrument dictionaries are considered temporary and re-read every time an exposure starts. This is so that rapidly changing data values do not become stale. Most dictionary information is written to the image file header if the selected image format supports headers. When an object such as an instrument or telescope is disabled, the corresponding object database information is deleted and no longer updated. Documentation for the Header class","title":"Header Class"},{"location":"azcam1/classes/#focalplane-class","text":"Below is the documentation for the FocalPlane class which is used internally to define all aspects of the focal plane and sensor configuration. Documentation for the FocalPlane class","title":"Focalplane class"},{"location":"azcam1/classes/#filename-class","text":"Below is the documentation for the Filename class which is used internally to define and manipulate image filenames. Documentation for the Filename class","title":"Filename class"},{"location":"azcam1/commands/","text":"Commands These commands are useful both in server and console applications. Note these are direct commands (function calls) and not class/tool methods. Fits Image Commands The azcam.fits commands provide FITS image support functions. Usage Example: azcam.fits.colbias(\"test.fits\", 3) Documentation for the FITS functions Plot Commands The azcam.plot commands are helpful for general plotting using matplotlib. Usage Example: azcam.plot.save_figure(1, \"myfigure.png\") Documentation for the plot functions Utility commands The azcam.utils commands are general purpose python functions used throughout azcam. Usage Example: azcam.utils.curdir(\"/data\") Documentation for the utility functions","title":"Commands"},{"location":"azcam1/commands/#commands","text":"These commands are useful both in server and console applications. Note these are direct commands (function calls) and not class/tool methods.","title":"Commands"},{"location":"azcam1/commands/#fits-image-commands","text":"The azcam.fits commands provide FITS image support functions. Usage Example: azcam.fits.colbias(\"test.fits\", 3) Documentation for the FITS functions","title":"Fits Image Commands"},{"location":"azcam1/commands/#plot-commands","text":"The azcam.plot commands are helpful for general plotting using matplotlib. Usage Example: azcam.plot.save_figure(1, \"myfigure.png\") Documentation for the plot functions","title":"Plot Commands"},{"location":"azcam1/commands/#utility-commands","text":"The azcam.utils commands are general purpose python functions used throughout azcam. Usage Example: azcam.utils.curdir(\"/data\") Documentation for the utility functions","title":"Utility commands"},{"location":"azcam1/testers/","text":"Testers The tester tools are for image sensor characterization. Report Commands The report tool is helpful when generating reports. Usage Example: from azcam.tools.testers.report import Report report=Report() report.make_rstfile(\"rstfile.rst\") Testers These classes acquire and analyze image sensor characterization data. Usage Example: from azcam.tools.testers.bias import bias bias.acquire() bias.analyze() Tester Base Testers base class Detector Characterization Base DetChar base class Bias Images Bias class Dark Signal Dark class Defects Defects class Detector Calibration DetCal class Extended Pixel Edge Response Charge Transfer Efficiency Eper class Fe55 X-Ray Gain, Noise, and Charge Transfer Efficiency Fe55 class Gain Gain class Linearity Linearity class Metrology Metrology class Pocket Pumping PocketPump class Photo-Response Non-Uniformity PRNU class Photon Transfer Curve PTC class Quantum Efficiency QE class Ramp Images Ramp class Superflat Images Superflat class","title":"Testers"},{"location":"azcam1/testers/#testers","text":"The tester tools are for image sensor characterization.","title":"Testers"},{"location":"azcam1/testers/#report-commands","text":"The report tool is helpful when generating reports. Usage Example: from azcam.tools.testers.report import Report report=Report() report.make_rstfile(\"rstfile.rst\")","title":"Report Commands"},{"location":"azcam1/testers/#testers_1","text":"These classes acquire and analyze image sensor characterization data. Usage Example: from azcam.tools.testers.bias import bias bias.acquire() bias.analyze()","title":"Testers"},{"location":"azcam1/testers/#tester-base","text":"Testers base class","title":"Tester Base"},{"location":"azcam1/testers/#detector-characterization-base","text":"DetChar base class","title":"Detector Characterization Base"},{"location":"azcam1/testers/#bias-images","text":"Bias class","title":"Bias Images"},{"location":"azcam1/testers/#dark-signal","text":"Dark class","title":"Dark Signal"},{"location":"azcam1/testers/#defects","text":"Defects class","title":"Defects"},{"location":"azcam1/testers/#detector-calibration","text":"DetCal class","title":"Detector Calibration"},{"location":"azcam1/testers/#extended-pixel-edge-response-charge-transfer-efficiency","text":"Eper class","title":"Extended Pixel Edge Response Charge Transfer Efficiency"},{"location":"azcam1/testers/#fe55-x-ray-gain-noise-and-charge-transfer-efficiency","text":"Fe55 class","title":"Fe55 X-Ray Gain, Noise, and Charge Transfer Efficiency"},{"location":"azcam1/testers/#gain","text":"Gain class","title":"Gain"},{"location":"azcam1/testers/#linearity","text":"Linearity class","title":"Linearity"},{"location":"azcam1/testers/#metrology","text":"Metrology class","title":"Metrology"},{"location":"azcam1/testers/#pocket-pumping","text":"PocketPump class","title":"Pocket Pumping"},{"location":"azcam1/testers/#photo-response-non-uniformity","text":"PRNU class","title":"Photo-Response Non-Uniformity"},{"location":"azcam1/testers/#photon-transfer-curve","text":"PTC class","title":"Photon Transfer Curve"},{"location":"azcam1/testers/#quantum-efficiency","text":"QE class","title":"Quantum Efficiency"},{"location":"azcam1/testers/#ramp-images","text":"Ramp class","title":"Ramp Images"},{"location":"azcam1/testers/#superflat-images","text":"Superflat class","title":"Superflat Images"},{"location":"azcam1/tools/","text":"Tools AzCam's tools are used to define and control a system. The supported systems include: Astronomical Research Cameras, Inc. gen1, gen2, and gen3 controllers. See this link . STA Archon controllers. See this link . OCIW Magellan CCD controllers (ITL version). See this link . ASCOM cameras. See this link . This code has been used for QHY and ZWO cameras. Exposure Tools These tools defines the exposure interface. The default tool name is exposure . The exposure tool often coordinates the actions of the hardware tools such as controller , instrument , etc. For example, when exposure is initialized the tools in the exposure.tools_init list are initialized. Similarly when exposure is reset, the tools in the exposure.tools_reset list are reset. Documentation for the base Exposure class Astronomical Research Cameras Controllers import azcam.server from azcam.tools.arc.exposure_arc import ExposureArc exposure = ExposureArc () exposure . filetype = azcam . db . filetypes [ \"MEF\" ] exposure . image . filetype = azcam . db . filetypes [ \"MEF\" ] exposure . set_remote_imageserver ( \"localhost\" , 6543 ) exposure . image . remote_imageserver_filename = \"/data/image.fits\" exposure . image . server_type = \"azcam\" exposure . set_remote_imageserver () STA Archon Controllers import azcam.server from azcam.tools.archon.exposure_archon import ExposureArchon exposure = ExposureArchon () filetype = \"MEF\" exposure . fileconverter . set_detector_config ( detector_sta3800 ) exposure . filetype = azcam . db . filetypes [ filetype ] exposure . image . filetype = azcam . db . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . add_extensions = 1 Magellan Controllers import azcam.server from azcam.tools.mag.exposure_mag import ExposureMag exposure = ExposureMag () filetype = \"BIN\" exposure . filetype = exposure . filetypes [ filetype ] exposure . image . filetype = exposure . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . set_filename ( \"/azcam/soguider/image.bin\" ) exposure . test_image = 0 exposure . root = \"image\" exposure . display_image = 0 exposure . image . make_lockfile = 1 ASCOM Exposure import azcam.server from azcam.tools.ascom.exposure_ascom import ExposureASCOM exposure = ExposureASCOM () filetype = \"FITS\" exposure . filetype = exposure . filetypes [ filetype ] exposure . image . filetype = exposure . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . set_filename ( \"/data/zwo/asi1294/image.fits\" ) exposure . display_image = 1 Controller Tools These tools defines the camera controller interface. The default tool name is controller . Documentation for the base Controller class Astronomical Research Cameras Controllers import azcam.server from azcam.tools.arc.controller_arc import ControllerArc controller = ControllerArc () controller . timing_board = \"arc22\" controller . clock_boards = [ \"arc32\" ] controller . video_boards = [ \"arc45\" , \"arc45\" ] controller . utility_board = None controller . set_boards () controller . pci_file = os . path . join ( azcam . db . systemfolder , \"dspcode\" , \"dsppci3\" , \"pci3.lod\" ) controller . video_gain = 2 controller . video_speed = 1 Camera Servers Camera servers are separate executable programs which manage direct interaction with controller hardware on some systems. Communication with a camera server takes place over a socket via communication protocols defined between azcam and a specific camera server program. These camera servers are necessary when specialized drivers for the camera hardware are required. They are usually written in C/C++. DSP Code The DSP code which runs in the ARC controllers is assembled and linked with Motorola software tools. These tools are typically installed in the folder /azcam/motoroladsptools/ on a Windows machine as required by the batch files which assemble and link the code. While the AzCam application code for the ARC timing board is typically downloaded during camera initialization, the boot code must be compatible for this to work properly. Therefore AzCam-compatible DSP boot code may need to be burned into the timing board EEPROMs before use, depending on configuration. The gen3 PCI fiber optic interface boards and the gen3 utility boards use the original ARC code and do not need to be changed. The gen1 and gen2 situations are more complex. For ARC system, the xxx.lod files are downlowded to the boards. STA Archon Controllers import azcam.server from azcam.tools.archon.controller_archon import ControllerArchon controller = ControllerArchon () controller . camserver . port = 4242 controller . camserver . host = \"10.0.2.10\" controller . header . set_keyword ( \"DEWAR\" , \"ITL1\" , \"Dewar name\" ) controller . timing_file = os . path . join ( azcam . db . systemfolder , \"archon_code\" , \"ITL1_STA3800C_Master.acf\" ) Magellan Controllers import azcam.server from azcam.tools.mag.controller_mag import ControllerMag controller = ControllerMag () controller . camserver . set_server ( \"some_machine\" , 2402 ) controller . timing_file = os . path . join ( azcam . db . datafolder , \"dspcode/gcam_ccd57.s\" ) Camera Servers Camera servers are separate executable programs which manage direct interaction with controller hardware on some systems. Communication with a camera server takes place over a socket via communication protocols defined between azcam and a specific camera server program. These camera servers are necessary when specialized drivers for the camera hardware are required. They are usually written in C/C++. DSP Code The DSP code which runs in Magellan controllers is assembled and linked with Motorola software tools. These tools should be installed in the folder /azcam/motoroladsptools/ on Windows machines, as required by the batch files which assemble and link the code. For Magellan systems, there is only one DSP file which is downloaded during initialization. Note that xxx.s files are loaded for the Magellan systems. ASCOM Controller import azcam.server from azcam.tools.ascom.controller_ascom import ControllerASCOM controller = ControllerASCOM () TempCon Tool This tool defines the temperature controller interface. The default tool name is tempcon . Documentation for the TempCon class CryoCon Testerature Controller This tools supports Cryogenic Control Systems Inc. (cryo-con) temperature controllers. See http://www.cryocon.com/. Example Code import azcam.server from azcam.tools.cryocon.tempcon_cryocon24 import TempConCryoCon24 tempcon = TempConCryoCon24 () tempcon . description = \"cryoconqb\" tempcon . host = \"10.0.0.44\" tempcon . control_temperature = - 100.0 tempcon . init_commands = [ \"input A:units C\" , \"input B:units C\" , \"input C:units C\" , \"input A:isenix 2\" , \"input B:isenix 2\" , \"input C:isenix 2\" , \"loop 1:type pid\" , \"loop 1:range mid\" , \"loop 1:maxpwr 100\" , ] Instrument Tool This tool defines the instrument interface. The default tool name is instrument . Documentation for the Instrument class Telescope Tool This tool defines the telescope interface. The default tool name is telescope . Documentation for the Telescope class Display Tool This tool defines the image display interface. The default tool name is display . rois = display . get_rois ( 2 , 'detector' ) display . display ( test . fits ') SAO Ds9 Image Display Tool This tool supports SAO's ds9 display tool running under Windows. See https://sites.google.com/cfa.harvard.edu/saoimageds9. See https://github.com/mplesser/azcam-ds9-winsupport for support code which may be helpful when displaying images on Windows computers from azcam.tools.ds9.ds9display import Ds9Display display = Ds9Display () display . display ( \"test.fits\" ) rois = display . get_rois ( 0 , \"detector\" ) print ( rois ) Documentation for the Display class Server Tool The base Tools class described below is inherited by all server tools. Documentation for the base Tools class Focus Tool This tools controls focus observations used to determine optimal instrument or telescope focus position. This code is usually executed in the console window although a server-side version is available on some systems. focus is an instance of the Focus class. focus . set_pars ( 1 , 30 , 10 ) focus . run () Focus Parameters Parameters may be changed from the command line as: focus.number_exposures=7 or focus.set_pars(1.0, 5, 25, 15) . focus.number_exposures = 7 Number of exposures in focus sequence focus.focus_step = 30 Number of focus steps between each exposure in a frame focus.detector_shift = 10 Number of rows to shift detector for each focus step focus.focus_position Current focus position focus.exposure_time = 1.0 Exposure time (seconds) focus.focus_component = \"instrument\" Focus component for motion - \"instrument\" or \"telescope\" focus.focus_type = \"absolute\" Focus type, \"absolute\" or \"step\" focus.set_pars_called = 1 Flag to not prompt for focus position focus.move_delay = 3 Delay in seconds between focus moves Sendimage Tool - Remote Image Server This tool supports sending an image to a remote host running an image server which receives the image. from azcam.tools.sendimage import SendImage sendimage = SendImage () remote_imageserver_host = \"10.0.0.1\" remote_imageserver_port = 6543 sendimage . set_remote_imageserver ( remote_imageserver_host , remote_imageserver_port , \"azcam\" ) Webserver Tool - FastAPI This tool implements a fastapi-based web server. See https://fastapi.tiangolo.com. from azcam.tools.fastapi.fastapi_server import WebServer webserver = WebServer () webserver . index = f \"index_mysystem.html\" webserver . start () Browser-based Tools` These tools implements various browser-based tools which connect to an azcam web server. Usage Open a web browser to http://localhost:2403/XXX where XXX is a toolname, with the appropriate replacements for localhost and the web server port number. Supported Browser Tools status - display current exposure status exptool - a simple exposure control tool Console Tools Console tools are commands which can be called from a console application to send the equivalent command to a server process. Commands are typically accessed in a console process as toolname.commandname(parameters) , e.g. instrument.get_wavelength() . A console tool may be obtained by toolname = azcam.get_tools(\"toolname\") where toolname is like exposure , instrument , or tempcon . A tool may also be accessed as azcam.db.toolname , like azcam.db.controller . Documentation for the ConsoleTools class","title":"Tools"},{"location":"azcam1/tools/#tools","text":"AzCam's tools are used to define and control a system. The supported systems include: Astronomical Research Cameras, Inc. gen1, gen2, and gen3 controllers. See this link . STA Archon controllers. See this link . OCIW Magellan CCD controllers (ITL version). See this link . ASCOM cameras. See this link . This code has been used for QHY and ZWO cameras.","title":"Tools"},{"location":"azcam1/tools/#exposure-tools","text":"These tools defines the exposure interface. The default tool name is exposure . The exposure tool often coordinates the actions of the hardware tools such as controller , instrument , etc. For example, when exposure is initialized the tools in the exposure.tools_init list are initialized. Similarly when exposure is reset, the tools in the exposure.tools_reset list are reset. Documentation for the base Exposure class","title":"Exposure Tools"},{"location":"azcam1/tools/#astronomical-research-cameras-controllers","text":"import azcam.server from azcam.tools.arc.exposure_arc import ExposureArc exposure = ExposureArc () exposure . filetype = azcam . db . filetypes [ \"MEF\" ] exposure . image . filetype = azcam . db . filetypes [ \"MEF\" ] exposure . set_remote_imageserver ( \"localhost\" , 6543 ) exposure . image . remote_imageserver_filename = \"/data/image.fits\" exposure . image . server_type = \"azcam\" exposure . set_remote_imageserver ()","title":"Astronomical Research Cameras Controllers"},{"location":"azcam1/tools/#sta-archon-controllers","text":"import azcam.server from azcam.tools.archon.exposure_archon import ExposureArchon exposure = ExposureArchon () filetype = \"MEF\" exposure . fileconverter . set_detector_config ( detector_sta3800 ) exposure . filetype = azcam . db . filetypes [ filetype ] exposure . image . filetype = azcam . db . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . add_extensions = 1","title":"STA Archon Controllers"},{"location":"azcam1/tools/#magellan-controllers","text":"import azcam.server from azcam.tools.mag.exposure_mag import ExposureMag exposure = ExposureMag () filetype = \"BIN\" exposure . filetype = exposure . filetypes [ filetype ] exposure . image . filetype = exposure . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . set_filename ( \"/azcam/soguider/image.bin\" ) exposure . test_image = 0 exposure . root = \"image\" exposure . display_image = 0 exposure . image . make_lockfile = 1","title":"Magellan Controllers"},{"location":"azcam1/tools/#ascom-exposure","text":"import azcam.server from azcam.tools.ascom.exposure_ascom import ExposureASCOM exposure = ExposureASCOM () filetype = \"FITS\" exposure . filetype = exposure . filetypes [ filetype ] exposure . image . filetype = exposure . filetypes [ filetype ] exposure . display_image = 1 exposure . image . remote_imageserver_flag = 0 exposure . set_filename ( \"/data/zwo/asi1294/image.fits\" ) exposure . display_image = 1","title":"ASCOM Exposure"},{"location":"azcam1/tools/#controller-tools","text":"These tools defines the camera controller interface. The default tool name is controller . Documentation for the base Controller class","title":"Controller Tools"},{"location":"azcam1/tools/#astronomical-research-cameras-controllers_1","text":"import azcam.server from azcam.tools.arc.controller_arc import ControllerArc controller = ControllerArc () controller . timing_board = \"arc22\" controller . clock_boards = [ \"arc32\" ] controller . video_boards = [ \"arc45\" , \"arc45\" ] controller . utility_board = None controller . set_boards () controller . pci_file = os . path . join ( azcam . db . systemfolder , \"dspcode\" , \"dsppci3\" , \"pci3.lod\" ) controller . video_gain = 2 controller . video_speed = 1","title":"Astronomical Research Cameras Controllers"},{"location":"azcam1/tools/#sta-archon-controllers_1","text":"import azcam.server from azcam.tools.archon.controller_archon import ControllerArchon controller = ControllerArchon () controller . camserver . port = 4242 controller . camserver . host = \"10.0.2.10\" controller . header . set_keyword ( \"DEWAR\" , \"ITL1\" , \"Dewar name\" ) controller . timing_file = os . path . join ( azcam . db . systemfolder , \"archon_code\" , \"ITL1_STA3800C_Master.acf\" )","title":"STA Archon Controllers"},{"location":"azcam1/tools/#magellan-controllers_1","text":"import azcam.server from azcam.tools.mag.controller_mag import ControllerMag controller = ControllerMag () controller . camserver . set_server ( \"some_machine\" , 2402 ) controller . timing_file = os . path . join ( azcam . db . datafolder , \"dspcode/gcam_ccd57.s\" )","title":"Magellan Controllers"},{"location":"azcam1/tools/#tempcon-tool","text":"This tool defines the temperature controller interface. The default tool name is tempcon . Documentation for the TempCon class","title":"TempCon Tool"},{"location":"azcam1/tools/#cryocon-testerature-controller","text":"This tools supports Cryogenic Control Systems Inc. (cryo-con) temperature controllers. See http://www.cryocon.com/.","title":"CryoCon Testerature Controller"},{"location":"azcam1/tools/#instrument-tool","text":"This tool defines the instrument interface. The default tool name is instrument . Documentation for the Instrument class","title":"Instrument Tool"},{"location":"azcam1/tools/#telescope-tool","text":"This tool defines the telescope interface. The default tool name is telescope . Documentation for the Telescope class","title":"Telescope Tool"},{"location":"azcam1/tools/#display-tool","text":"This tool defines the image display interface. The default tool name is display . rois = display . get_rois ( 2 , 'detector' ) display . display ( test . fits ')","title":"Display Tool"},{"location":"azcam1/tools/#sao-ds9-image-display-tool","text":"This tool supports SAO's ds9 display tool running under Windows. See https://sites.google.com/cfa.harvard.edu/saoimageds9. See https://github.com/mplesser/azcam-ds9-winsupport for support code which may be helpful when displaying images on Windows computers from azcam.tools.ds9.ds9display import Ds9Display display = Ds9Display () display . display ( \"test.fits\" ) rois = display . get_rois ( 0 , \"detector\" ) print ( rois ) Documentation for the Display class","title":"SAO Ds9 Image Display Tool"},{"location":"azcam1/tools/#server-tool","text":"The base Tools class described below is inherited by all server tools. Documentation for the base Tools class","title":"Server Tool"},{"location":"azcam1/tools/#focus-tool","text":"This tools controls focus observations used to determine optimal instrument or telescope focus position. This code is usually executed in the console window although a server-side version is available on some systems. focus is an instance of the Focus class. focus . set_pars ( 1 , 30 , 10 ) focus . run ()","title":"Focus Tool"},{"location":"azcam1/tools/#focus-parameters","text":"Parameters may be changed from the command line as: focus.number_exposures=7 or focus.set_pars(1.0, 5, 25, 15) . focus.number_exposures = 7 Number of exposures in focus sequence focus.focus_step = 30 Number of focus steps between each exposure in a frame focus.detector_shift = 10 Number of rows to shift detector for each focus step focus.focus_position Current focus position focus.exposure_time = 1.0 Exposure time (seconds) focus.focus_component = \"instrument\" Focus component for motion - \"instrument\" or \"telescope\" focus.focus_type = \"absolute\" Focus type, \"absolute\" or \"step\" focus.set_pars_called = 1 Flag to not prompt for focus position focus.move_delay = 3 Delay in seconds between focus moves","title":"Focus Parameters"},{"location":"azcam1/tools/#sendimage-tool-remote-image-server","text":"This tool supports sending an image to a remote host running an image server which receives the image. from azcam.tools.sendimage import SendImage sendimage = SendImage () remote_imageserver_host = \"10.0.0.1\" remote_imageserver_port = 6543 sendimage . set_remote_imageserver ( remote_imageserver_host , remote_imageserver_port , \"azcam\" )","title":"Sendimage Tool - Remote Image Server"},{"location":"azcam1/tools/#webserver-tool-fastapi","text":"This tool implements a fastapi-based web server. See https://fastapi.tiangolo.com. from azcam.tools.fastapi.fastapi_server import WebServer webserver = WebServer () webserver . index = f \"index_mysystem.html\" webserver . start ()","title":"Webserver Tool - FastAPI"},{"location":"azcam1/tools/#browser-based-tools","text":"These tools implements various browser-based tools which connect to an azcam web server.","title":"Browser-based Tools`"},{"location":"azcam1/tools/#usage","text":"Open a web browser to http://localhost:2403/XXX where XXX is a toolname, with the appropriate replacements for localhost and the web server port number.","title":"Usage"},{"location":"azcam1/tools/#supported-browser-tools","text":"status - display current exposure status exptool - a simple exposure control tool","title":"Supported Browser Tools"},{"location":"azcam1/tools/#console-tools","text":"Console tools are commands which can be called from a console application to send the equivalent command to a server process. Commands are typically accessed in a console process as toolname.commandname(parameters) , e.g. instrument.get_wavelength() . A console tool may be obtained by toolname = azcam.get_tools(\"toolname\") where toolname is like exposure , instrument , or tempcon . A tool may also be accessed as azcam.db.toolname , like azcam.db.controller . Documentation for the ConsoleTools class","title":"Console Tools"},{"location":"code/","text":"azcam code","title":"Code Links"},{"location":"code/#azcam-code","text":"","title":"azcam code"}]}